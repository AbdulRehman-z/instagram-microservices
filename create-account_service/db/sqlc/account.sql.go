// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "accounts" (
  "username",
  "avatar",
  "age",
  "bio",
  "status"
)
VALUES(
    $1,$2,$3,$4,$5
) 
RETURNING id, username, uniqueid, age, bio, avatar, status, created_at, updated_at
`

type CreateAccountParams struct {
	Username string         `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
	Age      int32          `json:"age"`
	Bio      sql.NullString `json:"bio"`
	Status   string         `json:"status"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.Avatar,
		arg.Age,
		arg.Bio,
		arg.Status,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Uniqueid,
		&i.Age,
		&i.Bio,
		&i.Avatar,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, uniqueid, age, bio, avatar, status, created_at, updated_at
FROM "accounts"
WHERE "id" = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Uniqueid,
		&i.Age,
		&i.Bio,
		&i.Avatar,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "accounts"
SET
    "username" = coalesce($2, username),
    "avatar" = coalesce($3, avatar),
    "age" = coalesce($4, age),
    "bio" = coalesce($5, bio),
    "status" = coalesce($6, status)
WHERE "id" = $1
RETURNING id, username, uniqueid, age, bio, avatar, status, created_at, updated_at
`

type UpdateAccountParams struct {
	ID       int32          `json:"id"`
	Username sql.NullString `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
	Age      sql.NullInt32  `json:"age"`
	Bio      sql.NullString `json:"bio"`
	Status   sql.NullString `json:"status"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Username,
		arg.Avatar,
		arg.Age,
		arg.Bio,
		arg.Status,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Uniqueid,
		&i.Age,
		&i.Bio,
		&i.Avatar,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
