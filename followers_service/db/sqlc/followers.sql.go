// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: followers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const followUser = `-- name: FollowUser :one
INSERT INTO followers (leader_unique_id, follower_unique_id)
VALUES ($1, $2)
ON CONFLICT (leader_unique_id, follower_unique_id) DO NOTHING
RETURNING id, leader_unique_id, follower_unique_id, created_at, updated_at
`

type FollowUserParams struct {
	LeaderUniqueID   uuid.UUID `json:"leader_unique_id"`
	FollowerUniqueID uuid.UUID `json:"follower_unique_id"`
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (Follower, error) {
	row := q.db.QueryRowContext(ctx, followUser, arg.LeaderUniqueID, arg.FollowerUniqueID)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.LeaderUniqueID,
		&i.FollowerUniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const unfollowUser = `-- name: UnfollowUser :one
DELETE FROM followers
WHERE leader_unique_id = $1 AND follower_unique_id = $2
RETURNING id, leader_unique_id, follower_unique_id, created_at, updated_at
`

type UnfollowUserParams struct {
	LeaderUniqueID   uuid.UUID `json:"leader_unique_id"`
	FollowerUniqueID uuid.UUID `json:"follower_unique_id"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) (Follower, error) {
	row := q.db.QueryRowContext(ctx, unfollowUser, arg.LeaderUniqueID, arg.FollowerUniqueID)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.LeaderUniqueID,
		&i.FollowerUniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
