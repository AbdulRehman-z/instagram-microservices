// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: comments.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (post_id, user_unique_id, content)
VALUES ($1, $2, $3)
RETURNING id, post_id, user_unique_id, content, created_at
`

type CreateCommentParams struct {
	PostID       int32     `json:"post_id"`
	UserUniqueID uuid.UUID `json:"user_unique_id"`
	Content      string    `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.PostID, arg.UserUniqueID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserUniqueID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComments = `-- name: GetComments :many
SELECT id, post_id, user_unique_id, content, created_at FROM comments
WHERE post_id = $1
LIMIT $2
OFFSET $3
`

type GetCommentsParams struct {
	PostID int32 `json:"post_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetComments(ctx context.Context, arg GetCommentsParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getComments, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserUniqueID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsCount = `-- name: GetCommentsCount :one
SELECT COUNT(*)
FROM comments
WHERE post_id = $1
`

func (q *Queries) GetCommentsCount(ctx context.Context, postID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCommentsCount, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $1
WHERE id = $2
RETURNING id, post_id, user_unique_id, content, created_at
`

type UpdateCommentParams struct {
	Content string `json:"content"`
	ID      int32  `json:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.Content, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserUniqueID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
