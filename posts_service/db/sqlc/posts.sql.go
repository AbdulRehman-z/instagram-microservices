// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO "posts" (
    "unique_id",
    "url",
    "caption",
    "lat",
    "lng"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, unique_id, created_at, updated_at, url, caption, lat, lng
`

type CreatePostParams struct {
	UniqueID uuid.UUID       `json:"unique_id"`
	Url      string          `json:"url"`
	Caption  sql.NullString  `json:"caption"`
	Lat      sql.NullFloat64 `json:"lat"`
	Lng      sql.NullFloat64 `json:"lng"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.UniqueID,
		arg.Url,
		arg.Caption,
		arg.Lat,
		arg.Lng,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Caption,
		&i.Lat,
		&i.Lng,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM "posts" WHERE "id" = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const deletePostsByUniqueId = `-- name: DeletePostsByUniqueId :exec
DELETE
FROM "posts"
WHERE "unique_id" = $1
`

func (q *Queries) DeletePostsByUniqueId(ctx context.Context, uniqueID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostsByUniqueId, uniqueID)
	return err
}

const getPost = `-- name: GetPost :one
SELECT 
    "id",
    "unique_id",
    "created_at",
    "url",
    "caption",
    "lat",
    "lng"
FROM "posts" WHERE "id" = $1
`

type GetPostRow struct {
	ID        int32           `json:"id"`
	UniqueID  uuid.UUID       `json:"unique_id"`
	CreatedAt sql.NullTime    `json:"created_at"`
	Url       string          `json:"url"`
	Caption   sql.NullString  `json:"caption"`
	Lat       sql.NullFloat64 `json:"lat"`
	Lng       sql.NullFloat64 `json:"lng"`
}

func (q *Queries) GetPost(ctx context.Context, id int32) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.CreatedAt,
		&i.Url,
		&i.Caption,
		&i.Lat,
		&i.Lng,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT 
    "id",
    "unique_id",
    "created_at",
    "url",
    "caption",
    "lat",
    "lng"
FROM "posts" ORDER BY "created_at" DESC LIMIT $1 OFFSET $2
`

type GetPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPostsRow struct {
	ID        int32           `json:"id"`
	UniqueID  uuid.UUID       `json:"unique_id"`
	CreatedAt sql.NullTime    `json:"created_at"`
	Url       string          `json:"url"`
	Caption   sql.NullString  `json:"caption"`
	Lat       sql.NullFloat64 `json:"lat"`
	Lng       sql.NullFloat64 `json:"lng"`
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsRow{}
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UniqueID,
			&i.CreatedAt,
			&i.Url,
			&i.Caption,
			&i.Lat,
			&i.Lng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUniqueId = `-- name: GetPostsByUniqueId :many
SELECT 
    "id",
    "unique_id",
    "created_at",
    "url",
    "caption",
    "lat",
    "lng"
FROM "posts" WHERE "unique_id" = $1
`

type GetPostsByUniqueIdRow struct {
	ID        int32           `json:"id"`
	UniqueID  uuid.UUID       `json:"unique_id"`
	CreatedAt sql.NullTime    `json:"created_at"`
	Url       string          `json:"url"`
	Caption   sql.NullString  `json:"caption"`
	Lat       sql.NullFloat64 `json:"lat"`
	Lng       sql.NullFloat64 `json:"lng"`
}

func (q *Queries) GetPostsByUniqueId(ctx context.Context, uniqueID uuid.UUID) ([]GetPostsByUniqueIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUniqueId, uniqueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsByUniqueIdRow{}
	for rows.Next() {
		var i GetPostsByUniqueIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UniqueID,
			&i.CreatedAt,
			&i.Url,
			&i.Caption,
			&i.Lat,
			&i.Lng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE "posts" SET
"url" = coalesce($2, "url"),
"caption" = coalesce($3, "caption"),
"lat" = coalesce($4, "lat"),
"lng" = coalesce($5, "lng")
WHERE "id" = $1
RETURNING id, unique_id, created_at, updated_at, url, caption, lat, lng
`

type UpdatePostParams struct {
	ID      int32           `json:"id"`
	Url     string          `json:"url"`
	Caption sql.NullString  `json:"caption"`
	Lat     sql.NullFloat64 `json:"lat"`
	Lng     sql.NullFloat64 `json:"lng"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Url,
		arg.Caption,
		arg.Lat,
		arg.Lng,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Caption,
		&i.Lat,
		&i.Lng,
	)
	return i, err
}
