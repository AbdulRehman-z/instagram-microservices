// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: likes.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getCommentLikes = `-- name: GetCommentLikes :many
SELECT "user_unique_id" FROM comment_likes
WHERE comment_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetCommentLikesParams struct {
	CommentID int32 `json:"comment_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetCommentLikes(ctx context.Context, arg GetCommentLikesParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getCommentLikes, arg.CommentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var user_unique_id uuid.UUID
		if err := rows.Scan(&user_unique_id); err != nil {
			return nil, err
		}
		items = append(items, user_unique_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentLikesCount = `-- name: GetCommentLikesCount :one
SELECT COUNT(*) FROM comment_likes
WHERE comment_id = $1
`

func (q *Queries) GetCommentLikesCount(ctx context.Context, commentID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCommentLikesCount, commentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPostLikes = `-- name: GetPostLikes :many
SELECT "user_unique_id" FROM post_likes
WHERE post_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetPostLikesParams struct {
	PostID int32 `json:"post_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPostLikes(ctx context.Context, arg GetPostLikesParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getPostLikes, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var user_unique_id uuid.UUID
		if err := rows.Scan(&user_unique_id); err != nil {
			return nil, err
		}
		items = append(items, user_unique_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostLikesCount = `-- name: GetPostLikesCount :one
SELECT COUNT(*) FROM post_likes
WHERE post_id = $1
`

func (q *Queries) GetPostLikesCount(ctx context.Context, postID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostLikesCount, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const likeComment = `-- name: LikeComment :one
INSERT INTO comment_likes (comment_id, user_unique_id)
VALUES ($1, $2)
ON CONFLICT (comment_id, user_unique_id) DO NOTHING
RETURNING id, comment_id, user_unique_id, created_at
`

type LikeCommentParams struct {
	CommentID    int32     `json:"comment_id"`
	UserUniqueID uuid.UUID `json:"user_unique_id"`
}

func (q *Queries) LikeComment(ctx context.Context, arg LikeCommentParams) (CommentLike, error) {
	row := q.db.QueryRowContext(ctx, likeComment, arg.CommentID, arg.UserUniqueID)
	var i CommentLike
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserUniqueID,
		&i.CreatedAt,
	)
	return i, err
}

const likePost = `-- name: LikePost :one
INSERT INTO post_likes (post_id, user_unique_id)
VALUES ($1, $2)
ON CONFLICT (post_id, user_unique_id) DO NOTHING
RETURNING id, post_id, user_unique_id, created_at
`

type LikePostParams struct {
	PostID       int32     `json:"post_id"`
	UserUniqueID uuid.UUID `json:"user_unique_id"`
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) (PostLike, error) {
	row := q.db.QueryRowContext(ctx, likePost, arg.PostID, arg.UserUniqueID)
	var i PostLike
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserUniqueID,
		&i.CreatedAt,
	)
	return i, err
}

const unlikeComment = `-- name: UnlikeComment :one
DELETE FROM comment_likes
WHERE comment_id = $1 AND user_unique_id = $2
RETURNING id, comment_id, user_unique_id, created_at
`

type UnlikeCommentParams struct {
	CommentID    int32     `json:"comment_id"`
	UserUniqueID uuid.UUID `json:"user_unique_id"`
}

func (q *Queries) UnlikeComment(ctx context.Context, arg UnlikeCommentParams) (CommentLike, error) {
	row := q.db.QueryRowContext(ctx, unlikeComment, arg.CommentID, arg.UserUniqueID)
	var i CommentLike
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserUniqueID,
		&i.CreatedAt,
	)
	return i, err
}

const unlikePost = `-- name: UnlikePost :one
DELETE FROM post_likes
WHERE post_id = $1 AND user_unique_id = $2
RETURNING id, post_id, user_unique_id, created_at
`

type UnlikePostParams struct {
	PostID       int32     `json:"post_id"`
	UserUniqueID uuid.UUID `json:"user_unique_id"`
}

func (q *Queries) UnlikePost(ctx context.Context, arg UnlikePostParams) (PostLike, error) {
	row := q.db.QueryRowContext(ctx, unlikePost, arg.PostID, arg.UserUniqueID)
	var i PostLike
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserUniqueID,
		&i.CreatedAt,
	)
	return i, err
}
